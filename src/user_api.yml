# Notmail application API in yaml+markdown using swagger
swagger: '2.0'

# API information
info:
  version: "1.0.0"
  title: Notmail - User API
  description: |
    ## Introduction
    **User API** should always be used when a client needs to authenticate to retrieve messages.  
    
    When an application uses this API to get messages, it needs to authenticate within the server first, then it can retrieve a session id (usr) and a token (token) for future requests.

    This API is composed by different endpoints which serve multiple purposes.
    
    1. __/user/auth/__  
    A client will use this endpoint to get a session token which will use on future requests.
    
    1. __/user/sub/__  
    A client will use this endpoint to retrieve a list of subscriptions, subscribe or unsubscribe.
    
    1. __/user/msg/__  
    A client will use this endpoint to receive/delete messages.
    
    1. __/user/frozen/__  (not defined yet)
    A client will use this endpoint to freeze messages and get a list of saved messages.
    
    ## Typical Flow
    Example of a typical flow, ignoring checks, updates etc.
    ```
    Client %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Server
    
    1) The user authenticates on it's server
               |-- authenticate ---->
               <-------session------| 
    
    2) User subscribes to pending subs in case they exist
               |-- subscribe -->
               <----- ack------|
    
    3) User retrieves messages
               |----- get messages ---->
               <--------messages-------| 
    ```
    
    ## Data groups
    Elements in http url as query params:
    ```
    | notmail (string)
    | usr (string)
    | pwd (string)
    | token (string)
    | query (string)
    | subop (string)
    | unique_id (string)
    | delete (string)
    | data (string)
    | name (string)
    
    ```
    All data is structured in the following object groups, and should be sent and received in those groups as root elements **when** they are sent in the body of the http message.
    ```
    > (only on http 2xx messages)
    | app ({})
      | unique_id (string)
      | title (string)
      | description (string)
      | url (string)
      | unsecured_source (boolean)
      | icon (string)
      | version (string)
    | subs (array of {})
      | unique_id (string)
      | status (string)
      | validation (string)
    | msg ({})
      | msg_id (string)
      | title (string)
      | data (string)
      | priority (string)
      | arrival_time (string)
      | alert_time (string)
      | ack (string)
      | app (string)
    | session ({})
      | usr (string)
      | token (string)
      | expiration
    
    > (only on http error messages 3xx 4xx 5xx)
    | error ({})[*]
    
    ```
    
    ## Error codes
    For compatibility with all http clientes. Http error responses should carry a body with an error object with the code property.
    The parameter is a string with one of the following values
    


basePath: /user
schemes:
  - http

paths:
  # APPLICATION INDEX ENDPOINT
  /auth:

    get:
      description: |
        An application may use this endpoint to make an authorization and retrieve from the server a user id and a token.  
        * __'notmail' and 'pwd' are required__
        * 'name' is optional, to identify this session token  
        * 'params' is for restrictions, can contain: rdonly, msgonly, permanent
        * 'subs' if for restrictions, can contain the unique_id of only-allowed permissions for this token session
        * **Not implemented**  
          Param: 'display' will retrieve a list of all tokens  
          Then, with delete http method one can delete methods
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/q_notmail"
        - $ref: "#/parameters/q_pwd"
        - $ref: "#/parameters/q_name"
        - $ref: "#/parameters/q_params"
        - $ref: "#/parameters/q_subs"
      responses:
        "200":
          description: Authentication successful
          schema:
            type: object
            required: 
              - session
            properties:
              session:
                $ref: "#/definitions/session"
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized.
       
  /sub:    
  
    get:
      description: |
        An application may use this endpoint to verify it's subscriptions.  
        * Required fields: **usr | token**  
        * 'query' values: all, subscribed, pending, app
        * If 'query' is missing it will be 'all' (and restricted to permissions)  
        * If 'query' is 'app' then 'unique_id' is mandatory
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/q_usr"
        - $ref: "#/parameters/q_token"
        - $ref: "#/parameters/q_query"
        - $ref: "#/parameters/q_unique_id"
      responses:
        "200":
          description: |
            Response must contain either __subs__ for listing or __app__ for single query.
          schema:
            type: object
            properties:
              app:
                $ref: "#/definitions/app"
              subs:
                $ref: "#/definitions/subs"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden. Not allowed.
          
    put:
      description: |
        A client must use this endpoint to subscribe a pending subscription or to unsubscribe
        * Required fields: all of the following
        * 'usr' and 'token' ad identification key
        * 'unique_id' to identify app
        * 'subop' with values: 'subscribe' or 'unsubscribe'
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/q_usr"
        - $ref: "#/parameters/q_token"
        - $ref: "#/parameters/q_unique_id"
        - $ref: "#/parameters/q_subop"
      responses:
        "200":
          description: |
            Operation successful
        "400":
          description: Bad Request
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden. (this token does not allow this operation)
          
  /msg:
  
    get:
      description: |
        An application may use this endpoint to retrieve messages.
        * Required fields: **usr | token**  
        * if 'query' is missing, then 'all' is default. (Restrictions on token are applied)
        * 'query' values: all, sub
        * If 'query' is 'sub' then 'unique_id' is mandatory (at least one)
        * If 'data' is **1** then only data field is sent in the body in text/plain type. If data is set, then delete is set too.
        * If 'delete' id **1** then the message is automatically deleted from the server.
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/q_usr"
        - $ref: "#/parameters/q_token"
        - $ref: "#/parameters/q_query"
        - $ref: "#/parameters/q_unique_id"
        - $ref: "#/parameters/q_delete"
        - $ref: "#/parameters/q_data"
      responses:
        "200":
          description: |
            Response must contain either __subs__ for listing or __app__ for single query.
          schema:
            type: object
            properties:
              msgs: 
                $ref: "#/definitions/msgs"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden. Not allowed.
          
    delete:
      description: |
        An application may use this endpoint to delete messages. Servers must not store messages forever. Users must delete manually or automatically these messages using delete method or using delete=1 on retrieval
        * Required fields: **usr | token | query**  
        * if 'query' is missing, then 400 bad request message should be received as response
        * 'query' values: deleteall, sub, id
        * If 'query' is 'sub' then 'unique_id' is mandatory
        * If 'query' is 'deleteall' **ALL MESSAGES ARE DELETED**
        * If 'query' is 'id' then 'id' should be sent.
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/q_usr"
        - $ref: "#/parameters/q_token"
        - $ref: "#/parameters/q_query"
      responses:
        "200":
          description: |
            Message deleted
        "400":
          description: Bad Request
        "401":
          description: Unauthorized.
        "403":
          description: Forbidden. Not allowed.
          
definitions:

  app:
    type: object
    properties:
      title:
        type: string
        description: title of the application
      description:
        type: string
        description: description of the application
      url:
        type: string
        description: url of the application
      unsecured_source:
        type: boolean
        description: If app might not be secured
      icon:
        type: string
        description: url of a icon to be displayed
      version:
        type: string
        description: number indicating the times this app has updated it's info.
  
  subs:
    type: array
    items:
      type: object
      properties:
        unique_id:
          type: string
          description: unique_id of the application
        status:
          type: string
          description: status indicating if (subscribed, pending)
        validation:
          type: string
          description: value for user to compare between boths APIs
          
  msgs:
    type: array
    items:
      type: object
      properties:
        type: 
          type: string
        data:
          type: string
        title:
          type: string
        arrival_time:
          type: string
        alert_time:
          type: string
        ack:
          type: string
        app:
          type: string
        id:
          type: string
          

  session:
    type: object
    required:
      - usr
      - token
      - expiration
    properties:
      usr:
        $ref: "#/definitions/usr"
      token:
        $ref: "#/definitions/token"
      expiration:
        $ref: "#/definitions/expiration"

  usr:
    type: string
    description: User id/name got from the server
    
  token:
    type: string
    description: Token returned by the server
  
  expiration:
    type: string
    description: Time for which this sessions is valid

parameters:

  q_notmail:
    name: notmail
    in: query
    required: false
    type: string
    description: Notmail address

  q_pwd:
    name: pwd
    in: query
    required: false
    type: string
    description: User password
    
  q_usr:
    name: usr
    in: query
    required: false
    type: string
    description: User id/name got from the server
    
  q_token:
    name: token
    in: query
    required: false
    type: string
    description: Token returned by the server

  q_name:
    name: name
    in: query
    required: false
    type: string
    description: Optional name of the session

  q_params:
    name: params
    in: query
    required: false
    type: string
    description: noexp, rdonly, msgonly
    
  q_subs:
    name: subs
    in: query
    required: false
    type: string
    description: List of only-allowed subs
    
  q_subop:
    name: subop
    in: query
    required: false
    type: string
    description: Operation with subscriptions (subscribe, unsubscribe)
    
  q_query:
    name: query
    in: query
    required: false
    type: string
    description: Query operation option (all, subscribed, pending, app, all, sub)

  q_unique_id:
    name: unique_id
    in: query
    required: false
    type: string
    description: Unique id of an specific subscription to query for
    
  q_delete:
    name: delete
    in: query
    required: false
    type: string
    description: Delete message after download
    
  q_data:
    name: data
    in: query
    required: false
    type: string
    description: Get-only data field from message instead of full json
