# Notmail application API in yaml+markdown using swagger
swagger: '2.0'

# API information
info:
  version: "1.0.0"
  title: Notmail - Application API
  description: |
    ## Introduction
    **APPLICATION API** should always be used to send messages to any destination from an application.  
    
    When an application uses this API to send messages, it needs to register within the server first, then it can ask for permission to be able to send messages to an specific user, and finally it can send them at any time.
    
    This API is composed by different endpoints which serve multiple purposes.
    
    1. __/app/index/__  
    An application will use this API to register itself within the destination server. It may also check it's current status, update information and delete itself from the index.
    
    1. __/app/sub/__  
    A registered application will use this endpoint to ask for permission for sending messages to an specific user within that server. It may also check it's current condition on the user's intention.
    
    1. __/app/msg/__  
    A registered application may use this API to send messages to a set of subscribed users
    
    
    ## Helpful Notes
    > As a summary from the document 'server address resolution' and 'glossary' this are the main values that need to be considered when forgin HTTP messages.
    >  
    > Each user is identified within a server by it's *notmail*  
    > **<notmail> = <user>@<server>**  
    > 
    > Each server will present the following data as server address on a DNS resolution  
    > **<server_addr> = <server_ip>:<server_port>**
    >
    > This data should be saved by the application in order to use this API.
    > Then all messages should contain the following data:  
    > IP Header: \<server_ip>  
    > TCP Header: \<server_port>  
    > HTTP 'Host' header value: \<server_addr>  
    
    ## Typical Flow
    Example of a typical flow, ignoring checks, updates etc.
    ```
    Server %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Application  
    
    1) Application registers and stores unique_id, shared_key and root_secret from response.
               <-- register ----|  
                |---------------> 
    
    2) Application provides unique_id, shared_key and a user to ask him for subscription permission
               <-- subscription --|
                |-----------> ack
    
    3) Once user has accepted, app can send messages using shared_key and unique_id
               <----- message ----|
                |-----------> ack 
    ```
    
    ## Data groups
    All data is structured in the following object groups, and should be sent and received in those groups as root elements when they are sent in the body of the http message.
    ```
    > (only on http 2xx messages)
    | app ({})
      | title (string)
      | description (string)
      | url (string)
      | unsecured_source (boolean)
    | auth ({})
      | unique_id (string)
      | shared_key (string)
      | root_secret (string)
    | dest ({})
      | user (string)
      | users (string)
    | msg ({})
      | title (string)
      | data (string)
      | priority (string)
      | deliver_time (string)
      | alert_time (string)
      | ack (string)
    | info ({})
      | validation (string)
      
    > (only on http error messages 3xx 4xx 5xx)
    | error ({})[*]
      | code (string)[*]
      | unsubscribed_users (array of strings)[optional]
    ```
    
    ## Error codes
    For compatibility with all http clientes. Http error responses should carry a body with an error object with the code property.
    The parameter is a string with one of the following values
    - bad_request
    - registration_forbidden
    - not_registered
    - wrong_secret
    - no_user
    - not_subscribed


basePath: /app
schemes:
  - http

paths:
  # APPLICATION INDEX ENDPOINT
  /index:
  
    post:
      description: |
        So as to send messages to users behind a remote server, an application must register itself and obtain a shared_key and a unique_id.  
        
        This application must store this values for each server it needs to connect to so as to send messages.  
        
        It will also obtain a root_secret wich can be use for administration purposes only.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: app
          description: | 
            Title is **required**
          required: true
          schema:
            type: object
            required: 
              - app
            properties:
              app:
                $ref: "#/definitions/app"
      responses:
        "201":
          description: Registration succesful
          schema:
            type: object
            required: 
              - auth
            properties:
              auth:
                $ref: "#/definitions/auth"
          headers:
            Location:
              description: "The url of the new application"
              type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized. Only if server does not allow public registration of new applications.
        
  /index/{unique_id}:
  
    put:
      description: |
        To update or add information about the application such us the url or the description. Note that **title** cannot be updated.
        - Server will regenerate the shared_key.  
        - unique_id or root_secret should never change.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/p_unique_id"
        - $ref: "#/parameters/q_shared_key"
        - in: body
          name: app
          description: | 
            Title is **ignored**
          required: true
          schema:
            type: object
            required: 
              - app
            properties:
              app:
                $ref: "#/definitions/app"
      responses:
        "200":
          description: Update succesful
          schema:
            type: object
            required:
              - auth
            properties:
              auth:
                type: object
                required:
                  - shared_key
                properties:
                  shared_key:
                    $ref: "#/definitions/shared_key"
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized. Application not authorized / registered.
        "403":
          description: Forbidden. Wrong root_secret.
          
    get:
      description: |
        An application may use this endpoint to verify it's current state on a server.
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/p_unique_id"
        - $ref: "#/parameters/q_shared_key"
      responses:
        "200":
          description: App is registered
          schema:
            type: object
            required: 
              - app
            properties:
              app:
                type: object
                properties:
                  title:
                    type: string
                    description: title of the application
                  description:
                    type: string
                    description: description of the application
                  url:
                    type: string
                    description: url of the application
                  unsecured_source:
                    type: boolean
                    description: source might be unsecure.
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized. Application not authorized / registered.
          
    delete:
      description: |
        An application may use this endpoint to get removed from the server.
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/p_unique_id"
        - $ref: "#/parameters/q_shared_key"
        - $ref: "#/parameters/q_root_secret"
      responses:
        "200":
          description: App deleted
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized. Application not authorized / registered.
        "403":
          description: Forbidden. Wrong secret.
          
  /sub:    
    put:
      description: |
        Once an application is registered in the destination server it must ask for permission to each user it needs to send messages to.  
        This is called subscription requesting. Subscriptions are 'requested' using this endpoint and only last for a few minutes after they expire. They show a message to the user in both sides that should be observed and manually compared to ensure that there is no third party attempting to hijack the subscription.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/q_unique_id"
        - $ref: "#/parameters/q_shared_key"
        - in: body
          name: app
          description: | 
            User to request subscription to
          required: true
          schema:
            type: object
            required:
              - dest
            properties:
              dest:
                type: object
                required: 
                  - user
                properties:
                  user:
                    $ref: "#/definitions/user"
      responses:
        "200":
          description: Subscription requested
          schema:
            type: object
            required:
              - info
            properties:
              info:
                type: object
                required: 
                  - validation
                properties:
                  validation:
                    type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized. Not registered | wrong key.
        "403":
          description: Forbidden. No such user.

    get:
      description: |
        An application may use this endpoint to verify if it is allowed to send messages to a user.
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/q_unique_id"
        - $ref: "#/parameters/q_shared_key"
        - $ref: "#/parameters/q_user"
      responses:
        "200":
          description: Subscription enabled
        "400":
          description: Bad Request
        "401":
          description: Unauthorized. Not registered | wrong key.
        "403":
          description: Forbidden. Not such subscription.

  /msg:
    post:
      description: |
        To send a message to a user the server must be registered and the user must have allowed it to send him messages. 
        
        POST method should be used to send a message.
  
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/q_unique_id"
        - $ref: "#/parameters/q_shared_key"
        - in: body
          name: app
          description: | 
            Send Messages
          required: true
          schema:
            type: object
            required: 
              - dest
            properties:
              dest:
                type: object
                properties:
                  user:
                    $ref: "#/definitions/user"
                  users:
                    $ref: "#/definitions/users"
              msg:
                $ref: "#/definitions/msg"
      responses:
        "200":
          description: Message sent.
        "400":
          description: Bad Request.
        "401":
          description: Unauthorized. Not registered / wrong key. 
        "403":
          description: Forbidden. User not subscribed
  
          
definitions:

  msg:
    type: object
    required:
      - data
      - title
    properties:
      type: 
        type: string
      data:
        type: string
      title:
        type: string
      deliver_time:
        type: string
      alert_time:
        type: string
      ack:
        type: string
  
  app:
    type: object
    properties:
      title:
        type: string
        description: title of the application
      description:
        type: string
        description: description of the application
      url:
        type: string
        description: url of the application

  auth:
    type: object
    required:
      - unique_id
      - shared_key
      - root_secret
    properties:
      unique_id:
        $ref: "#/definitions/unique_id"
      shared_key:
        $ref: "#/definitions/shared_key"
      root_secret:
        $ref: "#/definitions/root_secret"
    
  user:
    type: string
    description: Id of the user in the form user@server
    
  users:
    type: array
    items:
      type: string
      description: Ids of the user in the form user@server
    
  unique_id:
    type: string
    description: Id to locate applicarion in the server
    
  shared_key:
    type: string
    description: Key to authenticate this application within the server
  
  root_secret:
    type: string
    description: Secret code to be kept for administration purposes.

parameters:

  p_unique_id:
    name: unique_id
    in: path
    required: true
    type: string
    description: Id to locate applicarion in the server as part of a uri
    
  q_unique_id:
    name: unique_id
    in: query
    required: true
    type: string
    description: Id to locate applicarion in the server as part of a uri

  q_shared_key:
    name: shared_key
    in: query
    required: true
    type: string
    description: Key to authenticate this application within the server

  q_root_secret:
    name: root_secret
    in: query
    required: true
    type: string
    description: Secret code to be kept for administration purposes.

  q_user:
    name: user
    in: query
    required: true
    type: string
    description: Id of the user in the form user@server url encoded